#检索数据
		a. 检索单个列：SELECT .… FROM .…；
		输出的数据可能存在差异：如果没有明确排序查询的结果，则返回的数据没有特定的顺序。返回的数据可能是数据被添加到表中的顺序，也可能不是。只要返回相同数目的行，就是正常的。
		b. 检索多个列：
		SELECT a,b,c,d FROM …；
		SQL一班返回原始的、无格式的数据。数据的格式化是表示问题，而不是检索问题。因此，表示一般在显示该数据的应用程序中规定。通常很少直接使用实际检索出的数据。
		c. 检索所有列SELECT * FROM .… ；
		通配符可以检测出名字未知的列，但是检索不需要的列通常会降低检索和应用程序的性能
		d. 检索不同的值SELECT DISTINCT .…FROM …；
		DISTINCT 作用于所有的列，不仅仅是在跟在其后的那一列。除非指定的两列完全相同，否则所有的行都会被检索出来
		e. 限制结果SQL Server 和 Access中使用SELECT时，可以使用TOP 关键词来限制最多返回多少行：
		SELECT TOP 5 …. FROM …;
		DB2: SELECT … FROM …. FETCH FIRST 5 ROWS ONLY;
		ORACLE: SELECT … FROM … WHERE ROWNUM <= 5;
		MySQL, MariaDB, PostgreSQL, SQLite: SELECT …. FROM … LIMIT 5;
		为了得到后面5行数据，需要指定从哪儿开始以及检索的行数：
		SELECT … FROM … LIMIT 5 OFFSET 5;-表示返回从第五行其的5行数据
		第一个被检索的行是第0行，而不是第1行。因此，LIMIT 1 OFFSET 1会检索第二行，而不是第一行
		MYSQL 和 MariaDB 支持简化版的LIMIT3,4 即LIMIT 4 OFFSET 3; 为了方便别人阅读，最好不要使用这一语句
		f. 注释：
			i. 行内注释：--This is a comment
			ii. 另起一行：#This is a comment
			iii. 多行注释：/* This is a multi
					Line comment*/
	III. 检索排序数据：ORDERBY语句
	如果不排序，数据一般将以它在底层表中出现的顺序显示，这有可能是数据最初添加到表中的顺序。但是如果数据随后进行过更新或者删除，那么这个顺序将会受到DBMS重用回收存储空间的方式的影响。因此，如果不明确控制的话，最终的结果不能也不应该依赖该排序顺序。如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义
		a. 单个排序：
		SELECT … FROM … ORDER BY ….; --在指定一条ORDER BY子句时，应该保证它是SELECT语句中最后一条子句。如果它不是最后的子句，将会出现错误信息。
		/*ORDER BY子句中使用的列将是为显示而选择的列，但是，实际上并不一定要这样，用非检索的列排序数据是完全合法的*/
		b. 按多个列排序：
		SELECT a,b,c FROM … ORDER BY a,b; --在按多个列排序时，排序的顺序完全按照规定进行。仅在多个行具有相同的值时，才按照下一个排序条件进行排序，如果第一个排序条件中的所有值都是唯一的，那么不会按照第二个排序条件进行排序。
		c. 按照列位置排序：
		SELECT a,b,c FROM … ORDER BY 2,3; --First order by b, then c.
		/*按照非选择列排序：当根据不出现在SELECT清单中的列进行排序时，不能采用列位置排序的方法。但是如果有必要，可以混合使用实际列名誉相对列位置*/
		d. 指定排序方向：为了进行降序排序， 必须指定DESC关键词：
		SELECT … FROM …. ORDER BY … DESC; --DESC只作用于直接位于其前面的列名。
		/*如果想在多个列上进行降序排序，那么必须对每一列指定DESC关键词*/
		• /*区分大小写和排序顺序：在字典排列顺序中，A与a被视为是相同的，大多数DBMS默认如此。但是许多DBMS也允许在需要时改变这种行为。如果你的DB包含大量外语字符，可能必须要这样做。如果要改变这种排序顺序，用简单的ORDER BY可能做不到，而必须请求数据库manager的帮助。*/
	IV. 过滤数据：
	只检索所需数据需要指定搜索条件即search criteria，搜索条件也称为过滤条件(filter condition)
	基本语句：SELECT … FROM … WHERE a = b; 
	/*digit没有太大的关系，DBMS指定了所使用的数据类型及其默认行为。如果输出结果与展示有所区别，实际上没有太大的问题*/
	/*数据也可以在应用层进行过滤。SQL的SELECT语句为客户端应用检索出超过实际所需的数据，然后客户端代码对返回数据进行循环，提取出所需要的行。但是让客户端处理数据库的工作将会极大地影响应用的性能，并且使得所创建的应用完全不具备可伸缩性。此外，如果在客户端过滤数据，服务器需要发送多余的数据，这无疑是对网络数据的浪费。*/
	• 同时使用WHERE和ORDER BY子句时，应该让ORDER BY位于WHERE之后，否则将会产生错误。
	• SQL的WHERE子句所支持的条件操作符：
	操作符	=	<>	!=	<=	!=	>=	>	!>	BETWEEN	IS NULL
	/*并非所有的DBMS都支持所有的操作符，需要查阅相应的文档*/
		a. 检查单个值:SELECT … FROM … WHERE a < 10;
		b. 不匹配检查:SELECT … FROM … WHERE vend_id <> 'DLL01'; --单引号用来限定字符串。如果将值与自服装类型的列进行比较，就需要限定引号。用来与数值列进行比较的值可以不用引号。
		c. 范围值检查：SELECT … FROM … WHERE … BETWEEN a AND b; --这里的BETWEEN实际上是包含边际值的，如果不明确的话就使用 >= a and <= b来限定
		d. 空值检查:在创建表时，表的设计人员可以指定其中的列能否不包含值。在一个列不包含值时，称其包含空值NULL:
		SELECT … FROM … WHERE a IS NULL;
		这条语句返回所有a列为空的行.
		/*各个DBMS有一些特有的操作符，参考相应的文档*/
		/*NULL和非匹配：通过过滤选择不包含指定值的所有行时，可能希望返回含NULL值的行，但是这做不到。因为unknown有特殊的含义，数据库不知道它们是否匹配，所以在进行匹配过滤或非匹配过滤时，不会返回这些结果*/
		/*过滤数据时，一定要验证被过滤列中含NULL的行确实出现在返回的数据中。*/
	V. 高级数据过滤
		a. 组合WHERE子句：使用AND 以及OR 进行数据过滤
		SELECT … FROM … WHERE (condition 1) AND/OR (condition2);
		/*可以将ORDER BY放在WHERE子句之后得到一个按顺序排列的结果*/
		/*在使用OR时，如果condition1符合，不管第二个条件是否符合，相应的行都将被检索出来*/
		b. 求值顺序：WHERE 子句可以包含任意数目的操作符，允许二者结合以进行复杂、高级的过滤。但是由于AND在求值过程中的优先级更高，需要极其注意其顺序(circle bracket)
		区别：1. SELECT … FROM …. WHERE (condition 1) OR (condition 2) AND (condition 3)
		以及：2. SELECT … FROM …. WHERE ((condition 1) OR (condition 2)) AND (condition 3)
		第一种情况会优先处理第二和第三种条件的交集，再处理交集与第一条件的并集
		第二种情况则会优先处理第一和第二种条件的并集，再处理并集与第三条件的交集
		/*在任何时候使用具有AND和OR操作符的WHERE子句时，都应该使用圆括号明确地分组操作符，用以消除默认求值顺序可能带来的歧义*/
		c. IN操作符：用来指定条件范围，范围中的每个条件都可以进行匹配。IN取一组由逗号分隔、括在circle bracket中间的合法值:SELECT .… FROM .…WHERE a IN ('CCBB','AADD');  --其后也可以跟着ORDER BY，实际上完成了OR的操作./*使用IN的优点：在有很多合法选项时，IN操作符的语法更清楚，更直观；在于其他AND和IN操作符组合使用IN时，求值顺序更容易管理; IN 操作符一般比一组OR的操作符执行得更快(越多合法选项，时间差可能越大); IN的最大优点是可以包含其他SELECT语句，能够更动态地建立WHERE语句*/
		d. NOT操作符: WHERE子句中的NOT操作符只有一个功能，就是否定其后所跟的任何条件。NOT关键字可以用在要过滤的列前，而不仅仅是在其后:SELECT .…FROM .…WHERE NOT (condition 1) ORDER BY …;
		此处的NOT 可能与不等号<>的作用相同
		/*在复杂的子句中，NOT是非常有用的。在于IN操作符联合使用时，NOT可以非常简单地找出与条件列表不匹配的行。*/
		/*MariaDB支持使用NOT否定 IN, BETWEEN 和EXISTS 子句。大多数DBMS允许使用NOT否定任何条件*/
	VI. 用通配符进行过滤
		a. LIKE操作符
		通配符可以创建比较特定数据的搜索模式。通配符本身实际上是SQL的WHERE子句中有特殊含义的字符。LIKE指示的DBMS，后跟的搜索模式利用通配符匹配而不是简单的相等匹配进行比较。
		• 百分号通配符%
		SELECT … FROM … WHERE a LIKE 'Fish%'; --将检索任意以Fish起头的词。%告诉DBMS接受Fish以后的任意字符，不管它有多少字符。
		/*如果使用Access，需要使用*而不是%；此外，根据DBMS的不同及其配置，搜索是可以区分大小写的。如果区分大小写，则 'fish%'与Fish就不匹配。*/
		/*可以使用多个通配符，无论它之前或之后出现什么字符，如'%bean bag%'，即接收任何位置上包含bean bag的值，无论它之前或之后出现什么字符*/
			§ 通配符也可以出现在搜索模式的中间，虽然这样做不太有用。如:
			SELECT … FROM … WHERE a LIKE 'F%y';
			/*有一种情况下，把通配符放在搜索模式中间是很有用的，就是根据邮件地址的一部分来查找电子邮件。如 WHERE email LIKE 'b%forta.com'*/
			/*%还能匹配0个字符。%代表搜索模式中给定位置的0,1或多个字符。*/
			§ 如果值后面跟空格，那么'F%y'就检索不出来。简单的办法是给搜索模式再增加一个%号，比如'F%y%'用来匹配y之后的字符或者空格。更好的办法是用函数去掉空格。
			§ %可以匹配任何东西，除了NULL以外的行。
		• 下划线通配符_
		只匹配单个字符，而不是多个字符。
		SELECT … FROM … WHERE a LIKE 'F_k%'; --DB2不支持通配符_,Access支持?而不是_.
		如果需要匹配两个字符，则使用两个下划线，不能多也不能少，只返回严格匹配好的结果。
		• 方括号通配符[]，用来指定一个字符集，它必须匹配指定位置(通配符位置)的一个字符
		/*只有Access和SQL server支持集合。请参阅相应的文档*/
		SELECT … FROM … WHERE a LIKE '[ABC]%' ORDER BY a; --匹配a中所有以A或B或C开头的行。集合仅匹配其中的一个字符，因此需要以%匹配其他内容，否则仅匹配内容为单个字符A或B或C的行。
		/*通配符可以使用前缀字符(脱字号)来否定。*/
		SELECT … FROM … WHERE a LIKE '^[ABC]%' ORDER BY a; --匹配任何不以A,B,C开头的行。Access中需要使用!而不是^,因此需要使用[!ABC]
			• 也可以使用NOT操作符来实现，^的唯一优点是使用多个WHERE子句时可以简化语法:
			SELECT … FROM … WHERE NOT a LIKE '[ABC]%' ORDER BY b;
		b. Summary:
		通配符很有用，但是搜索一般比前面讨论的其它搜索需要耗费更长的时间。
		• 不要过度地使用通配符。如果其他操作符能达到相同的目的，应该使用其它操作符。
		• 在确实需要使用通配符时，也尽量不要把它们用在搜索模式的开始处。把通配符置于开始处时搜索速度是最慢的。
		• 仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。
	VII. 创建计算字段
	计算字段并不实际存在于数据库表中。计算字段是运行时在SELECT语句内创建的。
	只有数据库知道哪些列是实际的表列，哪些是计算字段。从客户端来看，计算字段的数据与其他列的数据返回方式相同。--一般来说，在数据库服务器上完成转换和格式化工作比在客户端中完成要快很多。
		a. 拼接字段concatenate:
		多数DBMS使用加好或者两个竖杠表示：
		SELECT a + '('+ b + ')' FROM … WHERE … ORDER BY c; --Access和SQL server使用+号，DB2, Oracle, PostgreSQL, SQLite, Open Office Base使用||。
		SELECT a || '(' || b || ')' FROM … WHERE … ORDER BY c;
		MySQL或者MariaDB使用的是Concat函数：
		SELECT Concat(a, '(', b , ')') FROM … ORDER BY …;
		• 许多数据库保存填充为列宽的文本值，而实际上你并不需要这些空格。为正确返回格式化的数据，必须去掉空格，因此可以使用RTRIM(b):
		SELECT RTRIM(a) + '(' + RTRIM(b) + ')' FROM … WHERE … ORDER BY… ;
		SELECT RTRIM(a) || '(' || RTRIM(b) || ')' FROM … WHERE … ORDER BY …; --大多数DBMS都支持RTRIM(),LTRIM(),TRIM()
		b. 使用别名
		SELECT RTRIM(a) + '(' + RTRIM(b) + ')' AS … FROM … WHERE … ORDER BY…;
		SELECT RTRIM(a) || '(' || RTRIM(b) || ')' AS … FROM … WHERE … ORDER BY…;
		/*在很多DBMS中AS关键字是可以选择的，但是最好使用AS*/
		/*AS可以在实际的表列名中包含不合法的字符(如空格)时重新命名它，在原来的名字含混或者容易误解时扩充它。*/
		/*别名的名字既可以是一个单词，也可以是一个字符串。多单词的名字可读性高，不过会给客户端应用带来各种问题。因此，别名最常见的使用是将多个单词的列名重命名为一个单词的名字。*/
		c. 执行算术计算：
		SELECT a,b,c, a*b AS d FORM … WHERE … ORDER BY …;
		• SELECT语句为测试、检验函数和计算提供了很好的方法。虽然SELECT通常用于从表中检索数据，但是省略了FROM子句之后就是简单地访问和处理表达式，例如SELECT 3*2; 将返回6，SELECT TRIM(' ABC ');将返回ABC，SELECT NOW(); 将返回当前的日期和时间。
	VIII. 使用函数处理数据
	不同的DBMS对函数的支持不一样，因此SQL是不可移植的。为特定SQL实现编写的代码在其他实现中可能不正常。
	• 是否该使用函数：在写的时候注意做好代码注释，以便能够确切地知道所编写的SQL代码的含义。
	大多数SQL支持以下函数：
		• 用于处理文本字符串的文本函数,如删除或填充值，转换值为大写或小写。
		• 用于在数值数据上进行算术操作的数值函数，如返回绝对值，进行代数运算
		• 用于处理日期和时间值并从这些值中提取特定成分的日期和时间函数，如返回两个日期之差，检查日期有效性
		• 返回DBMS正在使用的特殊信息的系统函数，如返回用户登录信息
		a. 文本处理函数
		UPPER()-输出大写：
		SELECT a, UPPER(b) AS c FROM … WHERE (NOT) … LIKE '[ABC]' ORDER BY …;
		常用的文本处理函数：
		LEFT()	返回字符串左边的字符
		LENGTH()-也可以使用DATALENGTH()或者LEN()	返回字符串的长度
		LOWER() (Access使用LCASE())	将字符串转换为小写
		LTRIM()	去掉字符串左边的空格
		RIGHT()	返回字符串右边的字符
		RTRIM()	去掉字符串右边的空格
		SOUDNEX()	返回字符串的SOUNDEX值
		UPPER() (Access使用UCASE())	将字符串转换为大写
		
		SOUNDEX()使用方法：
		SELECT … FROM … WHERE SOUNDEX(a) = SOUNDEX('Certain Phrases');
		b. 日期和时间处理函数：
		日期和时间函数在SQL中具有重要作用，但是他们的可移植性最差，不同的DBMS关于如何匹配、处理时间的函数差别很大
		比如，检索2012年所有的订单：
		DBMS	语句
		SQL Server	SELECT … FROM … WHERE DATEPART(YY, order_date) = 2012;
		Access	SELECT … FROM … WHERE DATEPART('yyyy', order_date) = 2012;
		PostgreSQL	SELECT … FROM … WHERE DATE_PART('year', order_date) = 2012;
		Oracle	SELECT … FROM … WHERE to_number(to_char(order_date, 'YYYY')) = 2012;
			SELECT … FROM .. WHERE order_date BETWEEN to_date('01-01-2012') AND to_date('12-31-2012');
		MariaDB, MySQL	SELECT … FROM … WHERE YEAR(order_date) = 2012;
		SQLite	SELECT … FROM … WHERE strftime('%Y', order_date) = '2012';
		c. 数值处理函数：最为统一、最一致
		ABS(), COS(), EXP(), PI(), SIN(), SQRT(), TAN()
	IX. 汇总数据：聚集函数
	SQL查询可用于检索数据，以便分析和报表生成。这种类型的检索列子有：
		○ 确定表中的行数-或者满足某个条件或包含某个特定值的行数
		○ 获得表中某些行的和
		○ 找出表列(或所有行或某些特定的行)的最大值、最小值、平均值。
		a. AVG():
		SELECT AVG() AS … FROM … WHERE …; --只能用来确定特定数列值的平均值，而且列名必须作为函数参数给出。为了获得多个列的平均值，必须使用多个AVG()函数。
		/*AVG()函数忽略值为NULL的行*/
		b. COUNT():
		• SELECT COUNT(*) AS … FROM …; --不管行中各列有什么值，对所有行进行计数。
		• SELECT COUNT(a) AS … FROM …; --对有值的行进行计数，指定列名时会忽略指定列的值为空的行
		c. MAX():
		MAX()要求指定列名，返回指定列中的最大值
		SELECT MAX(a) AS b FORM …; --MAX()忽略值为NULL的行
		/*对于非数值数据使用MAX():一般来说MAX()被用来找出最大的数值或者日期值，但是许多DBMS允许将它用来返回任意列中的最大值，包括返回文本列中的最大值。在用于文本数据时，MAX()返回按该排列排序后的最后一行。*/
		d. MIN():
		与MAX()正好相反，在用于文本数据时，返回该列排序后最前面的行
		e. SUM():SELECT SUM(a) AS b FROM … WHERE …;
		/*SUM()也可以用来合计计算值*/
		SELECT SUM(a*b) AS c FROM … WHERE …;
		f. 聚集不同的值：
		对所有行执行计算，可以指定ALL参数或者不指定参数
		只包含不同的值，指定DISTINCT参数
		/*Access不支持DISTINCT,需要用子查询把DISTINCT数据返回到外部SELECT COUNT(*)语句*/
		SELECT AVG(DISTINCT a) AS b FROM … WHERE … ORDER BY…;
		/*DISTINCT不能用于COUNT(*)*/
		/*不同的DBMS还支持对查询结果的子集进行计算的TOP和TOPPERCENT*/
		g. 组合聚集函数：由于聚集函数只针对单个列，因此如果需要对多列数据进行处理，应该要有多个聚集函数
	X. 分组数据：GROUP BY 和 HAVING
		a. SELECT vend_id, COUNT(*) AS vend_prods FROM … GROUP BY vend_id; --GROUP BY指示DBMS按照vend_id排序并进行分组数据。这就会对每个vend_id而不是整个表计算num_prods一次。
		• GROUP BY子句可以包含任意数目的列，因而可以对分组进行嵌套，更细致地进行数据分组
		• 如果在GROUP BY子句中嵌套了分组，数据将在最后指定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算(所以不能从个别的列中取回数据)
		• GROUP BY子句中列出的每一列都必须是检索列或有效的表达式(但是不能是聚集函数)。如果在SELECT中使用表达式，则必须在GROUP BY子句中指定相同的表达式。不能使用别名
		• 大多数SQL实现不允许GROUP BY列带有长度可变的数据类型(如文本或者备注型字段)
		• 如果分组列中包含具有NULL值的行，则NULL将作为一个分组返回。如果列中有多行NULL值，它们将分为一组。
		• GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前
		/*有的SQL实现允许根据SELECT列表中的位置指定GROUP BY的列。如GROUP BY 1,2 即表示按照选择的第二个列分组，然后再按照第一个列分组。但是并非所有的SQL实现都支持，而且使用时容易在编辑SQL语句时出错。*/
		b. HAVING:
		实际上WHERE过滤指定的是行而不是分组，并没有分组的概念。
		所有类型的WHERE子句都可以用HAVING来替代。唯一的差别是WHERE过滤行，HAVING过滤分组，基于分组聚集值：
		SELECT cust_id, COUNT(*) AS orders FROM … GROUP BY cust_id HAVING COUNT(*) >=2; --这一行过滤了两个以上订单的分组。
		/*HAVING和WHERE的区别：WHERE在数据分组前进行过滤，HAVING在数据分组之后进行过滤。WHERE排除的行不包括在分组中，这可能会改变计算值，从而影响HAVING子句中基于这些值而过滤掉的分组。*/
		SELECT vend_id, COUNT(*) as prod_nums FROM … WHERE price >= 4 GROUP BY vend_id HAVING COUNT(*) >2;
		/*使用HAVING应该结合GROUP BY，WHERE子句用于标准的行级过滤*/
		c. 分组和排序：
		SELECT order_num, COUNT(*) AS items FROM … GROUP BY order_num HAVING COUNT(*) > 3 ORDER BY items DESC, order_num;
		d. Summary：SELECT子句的顺序：
		子句	说明	是否必须使用
		SELECT	要返回的列	是
		FROM	从中检索数据的表	仅在从表中选择数据时使用
		WHERE	行级过滤	否
		GROUP BY	分组说明	仅在按组计算聚集时使用
		HAVING	组级过滤	否
		ORDER BY	输出排序顺序	否
	XI. 使用子查询(subquery)：
	当需要的信息处于不同的表中时，需要使用子查询：
		a. SELECT cust_id FROM orders WHERE order_num IN (SELECT order_num FROM order_items WHERE prod_id = 'RGAN01'); --子查询总是从内向外处理
		/*格式化SQL：包含子查询的SELECT语句难以阅读和调试，它们在较为复杂时更是如此。如上所示，把子查询分解为多行并进行适当的缩进，能极大地简化子查询的使用。*/
		• 一个三层的SELECT子查询案例：
		SELECT cust_name, cust_contact
		FROM …
		WHERE cust_id IN (SELECT cust id
				FROM …
				WHERE order_num IN (SELECT order_num
						FROM …
						WHERE prod_id = 'RGAN01'));
		/*在实际使用时由于性能的限制，不能嵌套太多的子查询*/
		/*作为子查询的SELECT语句只能查询单个列，多列将返回错误*/
		b. 作为计算字段使用子查询：
		SELECT cust_name, cust_state,(SELECT COUNT(*) 
								FROM …
								WHERE Oders.cust_id = Customers.cust_id) AS orders
		FROM …
		ORDER BY …;
		/*如果在SELECT语句中操作多个表，就应该使用完全限定列名来避免歧义*/
	XII. 联结表：
	联结是一种机制，用来在一条SELECT语句中关联表，因此称为联结。使用特殊的语法，可以联结多个表返回一组输出，联结在运行时关联表中正确的行。
	/*联结在实际的数据库表中并不存在。如果某一表中存储了无效的数据，则相应的对象不可访问，因为他们没有关联到有效的数据上。为了避免此种情况发生，可以指示数据库只允许在数据中出现合法值*/
		a. 等值联结，内联结：
		SELECT a,b,c FROM d,e WHERE b.f = e.f; --在使用多个表进行联结时，必须要完全限定列名，否则容易返回错误。
		没有WHERE子句时，第一个表中的每一行将于第二个表中的每一行配对，而不管它们逻辑上是否能配在一起。
		• 返回笛卡尔积的联结也成Cross Join
		此处使用INNER JOIN更好，因为不会被鄙视：
		SELECT a,b,c FROM d INNER JOIN e ON b.f = e.f; --使用这种语法时，联结条件用特定的ON子句而不是WHERE 子句给出。传递给ON的实际条件与传递给WHERE的相同
		b. 联结多个表：
		-在运行时DBMS会关联指定的每个表以处理联结。这种处理可能非常耗费资源，因此应该注意不要联结不必要的表。联结的表越多，性能下降越厉害。
		-虽然SQL本身不限制每个联结约束中表的数目，但实际上许多DBMS都有限制
		c. Summary:执行一个给定SQL的操作一般不止一种方法。很少有绝对正确或者绝对错误的方法。性能可能会受操作类型、所使用的DBMS、表中数据量、是否存在索引或键等条件的影响。因此有必要试验不同的选择机制，找出最适合具体情况的方法。
	XIII. 创建高级联结：
		a. 使用表别名：
		可以缩短SQL语句，同时允许在一条SELECT语句中多次使用相同的表
		SELECT …. FROM a AS A, b AS B, c AS C WHERE A.d = B.d AND C.e = B.e AND C.f = 'AABBCC';
		/*Oracle 中没有AS， 因此直接指定列名即可*/
		b. 使用不同类型的联结：
		• 自联结：自己查询自己
		• 外联结：许多联结将一个表中的行与另一个表中的行相关联，但有时候需要包含没有关联行的那些行。在如下情况时，可能需要使用联结完成：
			i. 对每个顾客下的订单进行计数，包括哪些至今尚未下订单的顾客
			ii. 列出所有产品以及订购数量，包括没有人订购的产品
			iii. 计算平均销售规模，包括那些至今尚未下订单的顾客
		SELECT Customers.cust_id, Orders.order_num
		FROM Customers LEFT OUTER JOIN Orders
		ON Customers.cust_id = Orders.cust_id; --使用外联结时，必须使用RIGHT或LEFT关键词指定包括其所有行的表(RIGHT指出的是OUTER JOIN右边的表，LEFT指出的是OUTER JOIN左边的表)。此处即指选择左边的表中所有的行。
		• 全外联结：检索两个表中的所有行并关联那些可以关联的行
		SELECT Customers.cust_id, Orders.cust_id
		FROM Orders FULL OUTER JOIN Customers
		ON Orders.cust_id = Customers.cust_id;
		/*FULL OUTER JOIN的支持：
		Access, MariaDB, MySQL, Open Office Base和SQLite不支持FULL OUTER JOIN 语法*/
		c. 使用带聚集函数的联结
		SELECT Customers.cust_id, COUNT(Orders.order_num) AS order_num
		FROM Customers INNER JOIN Orders
		ON Customers.cust_id = Orders.cust_id
		GROUP BY Customers.cust_id;
		d. 使用联结和联结条件：
			• 注意所使用的联结类型。一般使用内联结，但是使用外联结也有效
			• 关于确切的联结方法，应该查看具体的文档
			• 保证使用正确的联结条件，否则会返回不正确的数据。
			• 应该总是提供联结条件，否则会得出cross join的结果
			• 在一个联结中可以包含多个表，甚至可以对每个联结采用不同的联结类型。虽然这样做是合法的，但是应该在一起测试他们前分别尝试每个联结。这样会使故障排除更加简单。
	XIV. 组合查询
	UNION操作符将多条SELECT语句组合成一个结果集: SQL允许执行多个查询，并将结果作为一个查询结果集返回。这些组合查询通常称为并或符合查询：
		在一个查询中从不同的表返回结构数据
		对一个表执行多个查询，按照一个查询返回数据
		SELECT cust_name, cust_contact, cust_email
		FROM Customers
		WHERE cust_state IN ('IL','IN','MI')
		UNION
		SELECT cust_name, cust_contact, cust_email
		FROM Customers
		WHERE cust_name = 'Fun4All'; --按理来说没有SELECT语句数目，但是最好参考一下具体的DBMS标准
		a. 组合查询规则：
		• UNION必须由两条或者两条以上的SELECT语句组成，语句之间用关键字UNION分开
		• UNION中的每个查询必须包含相同的列、表达式或者聚集函数，只是不需要完全按照相同的次序列出
		• 列数据类型必须兼容：类型不必完全相同，但必须是DBMS可以隐含转换的类型，如不同的数值类型或者不同的日期类型
		b. 包含或取消重复的行
		UNION从查询结果中自动去除了重复的行，可以使用UNION ALL来返回所有的匹配行。
		/*如果确实需要每个条件的匹配行全部出现，包括重复行，那么就必须使用UNION ALL，而不是WHERE*/
		• SELECT 语句的输出用ORDER BY子句排序。在UNION组合查询时，只能使用一条ORDER BY子句，它必须位于最后一条SELECT语句之后。对于结果集，不存在用一种方式排序一部分，而又用另一种方式排序另一部分的情况，因此不允许多条ORDER BY子句。
		SELECT a,b,c FROM … WHERE …
		UNION
		SELECT a,b,c FROM … WHERE …
		ORDER BY…;
		/*某些DBMS还支持另外两种类型的UNION：EXCEPT和INTERSECT，前者可以用来检索只在第一个表中存在而在第二个表中不存在的行，后者可以用来检索两个表中都存在的行。*/
	XV. 插入数据
	插入INSERT有几种方式：插入完整的行，插入行的一部分，插入某些查询的结果。
	/*在使用INSERT之前，应当保证自己有足够的权限来使用插入这个指令*/
		a. 插入完整的行
		INSERT INTO … VALUES(a,b,c,d,…,n); --存储到表中每一列的数据在VALUES子句中给出，必须给每一列提供一个值。如果某类没有值，则应该使用NULL值(如果表允许对该列指定空值)。各列必须以它们在表定义中出现的次序填充。
		/*INTO可选，但是为了保证SQL在DBMS之间可移植，最好还是提供INTO关键字*/
		更安全的方式：
		INSERT INTO A(a,b,c,d,…,n) VALUES(a,b,c,d,…,n); --因为提供了列名，VALUES必须以其指定的次序匹配指定的列名，不一定按各列出现在表中的实际次序。其优点是，即使表的结构改变，这条INSERT语句仍然能够正确工作。
		/*此时可以省略列:该列定义为允许NULL值；在表定义中给出默认值，这表示如果不给出值，将使用默认值.
		如果表中不允许有NULL值或者默认值，这时却省略了表中的值，DBMS就会产生错误信息，相应的行不能成功插入*/
		b. 插入检索出的数据：
		可以使用INSERT结合SELECT语句把另一表中的顾客合并到某一表中。不需要每次读取一行再使用INSERT插入:
		INSERT INTO A(a,b,c,d,…,n) SELECT a,b,c,d,…,n FROM …; --FROM的表必须与原表中描述的相同，而且如果主键值重复，后续INSERT操作将会失败。
		/*DBMS不关系SELECT返回的列名，只使用列的位置，因此名字不同也没关系。*/
		/*INSERT INTO … SELECT … FROM… WHERE;可以跟WHERE用来过滤数据*/
		c. 从一个表复制到另一个表
		SELECT * INTO … FROM …; --DB2不支持SELECT INTO
		/*MariaDB, MySQL, Oracle, PostgreSQL 和 SQLite 使用的语法有所不同：
		CREATE TABLE … AS … SELECT * FROM …; */
		• 任何使用SELECT选项和子句都可以使用，包括WHERE 和GROUP BY；
		• 可以利用联结从多个表中插入数据；
		• 不管从多少个表中检索数据，数据都只能插入到一个表中
	XVI. 更新和删除数据：
		a. 更新数据
		UPDATE … SET … WHERE …;--一定不要省略WHERE子句，否则稍不注意就会更新表中所有的行。
		• UPDATE可以使用子查询，使得能用SELECT语句检索出的数据更新列数据。
		• 有的SQL实现支持在UPDATE语句中使用FROM子句，用一个表的数据更新另一个表的行，需要参阅文档。
		b. 删除数据：
		DELETE FROM … WHERE …; --一定不要忽略使用WHERE子句。因为稍不注意就会错误地删除表中所有的行。
		/*DELETE删除了整行而不是删除列。要删除列请使用UPDATE语句。
		DELETE语句从表中删除了行，甚至是删除了表中所有的行。但是DELETE不删除表本身。
		如果想要更快地删除所有行，不需要使用DELETE而应该使用TRUNCATE TABLE语句*/
		c. Summary:
		• 除非确实打算更新和删除每一行，否则绝对不要使用不带WHERE子句的UPDATE或者DELETE语句。
		• 保证每个表都有主键，尽可能像WHERE子句那样使用它。
		• 在UPDATE或DELETE语句使用WHERE之前，应该先用SELECT进行测试以保证它过滤的是正确的记录，以防编写的WHERE子句不正确。
		• 使用强制实施引用完整性的数据表，这样DBMS将不允许删除其数据与其他表相关联的行。
		• 如果SQL没有撤销按钮，应该非常小心地使用UPDATE和DELETE，否则会发现自己更新或者删除了错误的数据。
	XVII. 创建和操纵表：
		a. 创建表
		• 多数DBMS都具有交互式创建和管理数据库表的工具
		• 表也可以直接使用SQL语句操纵
		CREATE TABLE Products
		(
			a CHAR(10)  NOT NULL,
			B CHAR(10)  NOT NULL,
			C CHAR(300) NOT NULL,
			D DECIMAL(8,2) NOT NULL,
			E VARCHAR(1000) NULL
		); --在Oracle,PostgreSQL, SQL Server 和SQLite中有效，对于MySQL varchar必须替换成为text，对于DB2必须从最后一列中去掉NULL。
		/*在创建新的表时，指定的表名必须不存在，否则会出错。为了防止意外覆盖已有的表，SQL要求首先手工删除该表，然后再重建它，而不是简单地创建表语句覆盖它*/
		--如果不指定NOT NULL，就认为指定的是NULL
		b. 指定默认值
		SQL允许指定默认值，在插入值时如果不给出值，DBMS将自动采用默认值。默认值在CREATE TABLE语句中的列定义中用关键字DEFAULT指定。
		/*默认值常常用于日期或者时间戳列。例如，通过指定引用系统日期的函数或者变量，将系统日期用作默认日期。 */
		• 获得系统日期的函数：
		DBMS	对应函数
		Access	NOW()
		DB2	CURRENT_DATE
		MySQL	CURRENT_DATE()
		Oracle	SYSDATE
		PostgreSQL	CURRENT_DATE
		SQL Server	GETDATE()
		SQLite	date('now')
		c. 更新表
		ALTER TABLE … ADD a CHAR(20);
		• 理想情况下，不要在表中包含数据时对其进行更新。应该在表的设计过程中充分考虑未来可能的需求，避免今后对表的结构做大的改动。
		• 所有的DBMS都允许给现有的表增加列，不过对所增加列的数据类型(以及DEFAULT和NULL的使用)都有所限制
		• 许多DBMS不允许删除或者更改表中的列
		• 多数DBMS允许重命名表中的列
		• 许多DBMS限制对已经填有数据的列进行更改，对未填有数据的列几乎没有限制
		ALTER TABLE … DROP COLUMN …;
			/*复杂的表结构更改：
			1. 用新的列布局创建一个新表；
			2. 使用INSERT SELECT从旧表赋值数据到新表。有必要的话可以使用转换函数和计算字段；
			3. 检验包含所需数据的新表；
			4. 重命名旧表(如果确定，可以删除它)；
			5. 用旧表原来的名字重命名新表；
			6. 根据需要，重新创建触发器、存储过程、索引和外键*/
		d. 删除表
		DROP TABLE …; --删除表没有确认，也不能撤销。许多DBMS允许强制实施有关规则，防止删除与其他表相关联的表，

